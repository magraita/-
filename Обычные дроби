using System;

namespace ConsoleApp3
{
    public class MyMath
    {
        public static int Evklid(int x, int y)
        {
            x = Math.Abs(x);
            y = Math.Abs(y);
            while (x * y != 0)
            {
                if (x > y) { x = x % y; }
                else { y = y % x; }
            }
            return x + y;

        }

    }
    public class Ratio
    {
        public int numertor;
        public int denominator;
        public Ratio(int num, int denom)
        {
            numertor = num;
            denominator = denom;
        }
        public Ratio(int num) : this(num, 1) { }
        public override string ToString()
        {
            if (numertor * denominator > 0)
            {
                numertor = Math.Abs(numertor);
                denominator = Math.Abs(denominator);
            }
            if (denominator < 0) 
            {
                denominator = Math.Abs(denominator);
                numertor = -numertor;
            }
            if (numertor % denominator == 0)
            {
                return (numertor / denominator) + "";
            }
            else
            {
                return $"{numertor} / {denominator}";
            }
        }
        public double ToDouble()
        {
            return (double)numertor / denominator;
        }
        public Ratio Simple_fraction()
        {
            int NOD;
            NOD = MyMath.Evklid(numertor, denominator);
            var n = numertor / NOD;
            var d = denominator / NOD;
            if (n % d == 0)
            {
                n = n / d;
                return new Ratio(n / d);
            }
            else
            {
                return new Ratio(n, d);
            }
        }

        public static Ratio operator ++(Ratio x)
        {
            Ratio newR;
            int N, D;
            D = x.denominator;
            N = x.numertor + D;
            newR = new Ratio(N, D);
            return newR.Simple_fraction();
        }
        public static Ratio operator --(Ratio x)
        {
            Ratio newR;
            int N, D;
            D = x.denominator;
            N = x.numertor - D;
            newR = new Ratio(N, D);
            return newR.Simple_fraction();
        }

        public static Ratio operator -(Ratio y, int x)
        {
            Ratio NewR;
            int N, D;
            D = y.denominator;
            N = y.numertor - y.denominator * x;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }
        public static Ratio operator -(int x, Ratio y)
        {
            Ratio NewR;
            int N, D;
            D = y.denominator;
            N = y.denominator * x - y.numertor;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }
        public static Ratio operator -(Ratio x, Ratio y)
        {
            int d1 = x.denominator, d2 = y.denominator, a = 1, b = 1, n1 = x.numertor, n2 = y.numertor, N, D;
            Ratio NewR;
            for (int i = 1; i < (d1 * d2 + 1); i++)
            {
                if (i % d1 == 0 && i % d2 == 0)
                {
                    a = i / d1;
                    b = i / d2;
                    break;
                }
            }
            d1 *= a;
            Console.WriteLine(d1);
            n1 *= a;
            n2 *= b;
            D = d1;
            N = n1 - n2;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }

        public static Ratio operator +(Ratio y, int x)
        {
            Ratio NewR;
            int N, D;
            D = y.denominator;
            N = y.denominator * x + y.numertor;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }
        public static Ratio operator +(int x, Ratio y)
        {
            Ratio NewR;
            int N, D;
            D = y.denominator;
            N = y.denominator * x + y.numertor;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }
        public static Ratio operator +(Ratio x, Ratio y)
        {
            int d1 = x.denominator, d2 = y.denominator, a = 1, b = 1, n1 = x.numertor, n2 = y.numertor, N, D;
            Ratio NewR;
            for (int i = 1; i < (d1 * d2 + 1); i++)
            {
                if (i % d1 == 0 && i % d2 == 0)
                {
                    a = i / d1;
                    b = i / d2;
                    break;
                }
            }
            d1 *= a;
            Console.WriteLine(d1);
            n1 *= a;
            n2 *= b;
            D = d1;
            N = n1 + n2;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }

        public static Ratio operator *(Ratio x, Ratio y)
        {
            int N, D;
            Ratio NewR;
            N = x.numertor * y.numertor;
            D = x.denominator * y.denominator;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }
        public static Ratio operator *(int x, Ratio y)
        {
            Ratio N = new Ratio(x);
            return (N * y).Simple_fraction();
        }
        public static Ratio operator *(Ratio y, int x)
        {
            Ratio N = new Ratio(x);
            return (N * y).Simple_fraction();
        }

        public static Ratio operator /(Ratio x, int y)
        {
            Ratio newR;
            int n, d;
            n = x.numertor;
            d = x.denominator * y;
            newR = new Ratio(n, d);
            return newR.Simple_fraction();
        }
        public static Ratio operator /(int y, Ratio x)
        {
            Ratio newR;
            int n, d;
            n = x.numertor;
            d = x.denominator * y;
            newR = new Ratio(n, d);
            return newR.Simple_fraction();
        }
        public static Ratio operator /(Ratio x, Ratio y)
        {
            int N, D;
            Ratio NewR;
            N = x.numertor * y.denominator;
            D = x.denominator * y.numertor;
            NewR = new Ratio(N, D);
            return NewR.Simple_fraction();
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            var r1 = new Ratio(1, -4);
            var r2 = new Ratio(5);
            Console.WriteLine(r1 * r2);
        }
    }
}
